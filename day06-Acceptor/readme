new EventLoop() => loop
    - new Epoll() => ep

new Server(loop) => server
    - server.loop=loop
    - new Acceptor()=>acceptor
        - new Socket()=>serv_sock
        - new Channel()=>serv_channel
            - serv_channel.loop=loop
            - serv_channel.sock=serv_sock
            - serv_channel.callback=&Acceptor::acceptConnection
            - serv_channel.enableReading()--> 
                - serv_channel.loop.epoll.add(serv_channel)
    - acceptor.setNewConnectionCallback(Server::newConnection(Socket *serv_sock))

loop->loop()
    - loop.ep.epoll_wait() => vector<Channel*> chs
        - chs.handleEvent()
            - if(newConnection())
                - new Socket()=>clnt_sock
                - new Channel()=>clntChannel
                    - serv_channel.loop=loop
                    - serv_channel.sock=clnt_sock
                    - serv_channel.callback=&Server::handleReadEvent
                    - serv_channel.enableReading()--> 
                        - serv_channel.loop.epoll.add(serv_channel)
            - else
                - handleReadEvent()

函数：
; 1. 创建loop,创建中创建loop.epoll
; 2. 创建一个server，让server.loop=loop
;     2.1 创建一个server时，创建serv_sock,创建servChannel。
;         2.1.1 创建这个servChannel时，让channel.loop=server.loop,channel.sock=serv_sock;
;     2.2 在创建一个server时，让servChannel可读。
;         2.2.1 让servChannel可读时，让servChannel.loop.epoll 添加该servChannel。

; 3. loop(),server.loop.epoll.epoll_wait() 得到vector<Channel*> chs
;     3.1 不断处理epoll待处理的channel


新增功能：
1. 更高级的抽象，把Server类的建立新连接功能独立抽象成 Acceptor类


文件：
新添 Acceptor.cpp   //建立新连接功能独立抽象
server.cpp          //新连接 被剥离到Acceptor.cpp 


总结：

其他：
#include <string.h>   bzero(&buf, sizeof(buf));
#include <unistd.h>   read(),write()
