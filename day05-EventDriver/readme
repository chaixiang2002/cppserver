new EventLoop() => loop
    - new Epoll() => ep

new Server(loop) => server
    - server.loop=loop
    - new Socket()=>serv_sock
    - new Channel()=>serv_channel
        - serv_channel.loop=loop
        - serv_channel.sock=serv_sock
    - serv_channel--> 
        - serv_channel.loop.epoll.add(serv_channel)

loop->loop()
    - loop.ep.epoll_wait() => vector<Channel*> chs
        - chs.handleEvent()

函数：
1. 创建loop,创建中创建loop.epoll
2. 创建一个server，让server.loop=loop
    2.1 创建一个server时，创建serv_sock,创建servChannel。
        2.1.1 创建这个servChannel时，让channel.loop=server.loop,channel.sock=serv_sock;
    2.2 在创建一个server时，让servChannel可读。
        2.2.1 让servChannel可读时，让servChannel.loop.epoll 添加该servChannel。

3. loop(),server.loop.epoll.epoll_wait() 得到vector<Channel*> chs
    3.1 不断处理epoll待处理的channel


新增功能：
1. 更高级的抽象，抽象Server类、和EventLoop类 ->服务器与事件驱动核心类


文件：
EventLoop.cpp       //有loop，有更新channel
server.cpp          //有处理函数， 有新连接的函数
修改 Channel.cpp    //加loop，加funtion

总结：

其他：
#include <string.h>   bzero(&buf, sizeof(buf));
#include <unistd.h>   read(),write()
